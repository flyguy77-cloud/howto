const getAllWorkflows = async (): Promise<WorkflowMap | undefined> => {
  try {
    const response = await client.get<WorkflowMap>('/api/workflows');
    return response.data;
  } catch (error) {
    console.error("Fout bij ophalen workflows:", error);
    return undefined;
  }
};

const data = await getAllWorkflows();

if (data) {
  setWorkflows(data); // TS weet: dit is een WorkflowMap
} else {
  console.warn("Geen workflows beschikbaar.");
}


// typing
type WorkflowMetadata = {
  id: UUID;
  name: string;
};

type WorkflowBundle = {
  workflow: WorkflowMetadata;
  nodes: Node[];
  edges: Edge[];
};




import { useQueryClient } from '@tanstack/react-query';

const queryClient = useQueryClient();

const handleCreateWorkflow = async () => {
  await createWorkflow(); // je post request
  queryClient.invalidateQueries({ queryKey: ['workflows', userId] }); // refetch
};


const { data: workflows, isLoading } = useQuery({
  queryKey: ['workflows', userId], // dynamische key
  queryFn: () => fetchWorkflows(userId), // haal op op basis van userId
  enabled: !!userId, // voorkomt fetch bij null
});

const { data } = useQuery({
  queryKey: ['workflow', workflowId],
  queryFn: ({ queryKey }) => {
    const [_key, id] = queryKey;
    return axios.get(`/api/workflows/${id}`).then(res => res.data);
  }
});
