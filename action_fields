// nodeRegistry
export type NodeField = {
  name: string;
  type: "select" | "text" | "number"; // of wat je ondersteunt
  options?: Option[] | ((nodeData: NodeData) => Promise<Option[]>);
};

export type NodeAction = {
  name: string;
  type: "select" | "button";
  options?: string[];
  onSelect?: (value: string, nodeData: NodeData) => void; // om modal te openen etc.
};

export type BaseNodeType = {
  type: string;
  label: string;
  actions?: NodeAction[];
  fields?: NodeField[];
};


//ScriptSelectModal
import React from "react";
import {
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Button,
  List,
  ListItem,
  ListItemButton,
  ListItemText,
  CircularProgress
} from "@mui/material";

type Props = {
  open: boolean;
  onClose: () => void;
  onSelect: (file: ScriptFile) => void;
  files: ScriptFile[];
  loading: boolean;
};

export type ScriptFile = {
  id: string;
  name: string;
  path: string;
};

const ScriptSelectModal = ({ open, onClose, onSelect, files, loading }: Props) => {
  return (
    <Dialog open={open} onClose={onClose} fullWidth>
      <DialogTitle>Kies een script uit GitLab</DialogTitle>
      <DialogContent>
        {loading ? (
          <CircularProgress />
        ) : (
          <List>
            {files.map((file) => (
              <ListItem key={file.id} disablePadding>
                <ListItemButton onClick={() => onSelect(file)}>
                  <ListItemText primary={file.name} secondary={file.path} />
                </ListItemButton>
              </ListItem>
            ))}
          </List>
        )}
      </DialogContent>
      <DialogActions>
        <Button onClick={onClose}>Annuleer</Button>
      </DialogActions>
    </Dialog>
  );
};

export default ScriptSelectModal;


// BaseNode.tsx
const [modalOpen, setModalOpen] = useState(false);
const [files, setFiles] = useState<ScriptFile[]>([]);
const [loading, setLoading] = useState(false);

// activeren vanuit node actieregel:
const openModal = async () => {
  setLoading(true);
  const files = await useGetGitlabFiles(); // jouw axios call
  setFiles(files);
  setLoading(false);
  setModalOpen(true);
};

// bij selectie
const handleScriptSelect = (file: ScriptFile) => {
  updateNodeData({ script: file.path }); // of waar je het opslaat
  setModalOpen(false);
};


// nodeRegistry
actions: [
  {
    name: "source",
    type: "select",
    options: ["local", "gitlab"],
    onSelect: (value, nodeData) => {
      if (value === "gitlab") {
        openModal(); // deze moet je aan je BaseNode injecteren
      }
    }
  }
]

// src/features/nodes/loadScript/loadScriptNode.ts
export const loadScriptNodeDef: BaseNodeType = {
  type: "loadscript",
  label: "Load Script",
  actions: [...],
  fields: [...]
};


import { loadScriptNodeDef } from "@/features/nodes/loadScript/loadScriptNode";
import { runScriptNodeDef } from "@/features/nodes/runScript/runScriptNode";
// etc.

export const nodeRegistry: Record<string, BaseNodeType> = {
  loadscript: loadScriptNodeDef,
  runscript: runScriptNodeDef,
  ...
};
