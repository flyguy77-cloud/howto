// noderegistry
import { BaseNodeDefinition } from "@/types/BaseNodeTypes";

export const nodeRegistry: Record<string, BaseNodeDefinition> = {
  loadscript: {
    type: "loadscript",
    label: "Laad Script",
    actions: [
      {
        name: "source",
        type: "select",
        options: ["local", "gitlab"]
      }
    ],
    fields: [
      {
        name: "script",
        type: "select",
        options: [] // Wordt dynamisch gevuld in BaseNode
      }
    ]
  }
};


// BaseNode
import React, { useState, useEffect } from "react";
import ScriptSelectModal, { ScriptFile } from "./ScriptSelectModal";
import { useGetGitlabFiles } from "@/api/useGetGitlabFiles";

const BaseNode = ({ nodeData, updateNodeData }: any) => {
  const [modalOpen, setModalOpen] = useState(false);
  const [files, setFiles] = useState<ScriptFile[]>([]);
  const [loading, setLoading] = useState(false);

  useEffect(() => {
    if (nodeData.actions?.source === "gitlab") {
      openModal();
    }
  }, [nodeData.actions?.source]);

  const openModal = async () => {
    setLoading(true);
    const result = await useGetGitlabFiles();
    setFiles(result);
    setLoading(false);
    setModalOpen(true);
  };

  const handleScriptSelect = (file: ScriptFile) => {
    updateNodeData({
      ...nodeData,
      script: file.path
    });
    setModalOpen(false);
  };

  return (
    <>
      <div>
        <strong>{nodeData.label || "Load Script Node"}</strong>
        <div>Bron: {nodeData.actions?.source}</div>
        <div>Script: {nodeData.script || "Geen gekozen"}</div>
      </div>

      <ScriptSelectModal
        open={modalOpen}
        onClose={() => setModalOpen(false)}
        onSelect={handleScriptSelect}
        files={files}
        loading={loading}
      />
    </>
  );
};

export default BaseNode;


// Modal
import React from "react";
import {
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Button,
  List,
  ListItem,
  ListItemButton,
  ListItemText,
  CircularProgress
} from "@mui/material";

export type ScriptFile = {
  id: string;
  name: string;
  path: string;
};

type Props = {
  open: boolean;
  onClose: () => void;
  onSelect: (file: ScriptFile) => void;
  files: ScriptFile[];
  loading: boolean;
};

const ScriptSelectModal = ({ open, onClose, onSelect, files, loading }: Props) => {
  return (
    <Dialog open={open} onClose={onClose} fullWidth>
      <DialogTitle>GitLab Script kiezen</DialogTitle>
      <DialogContent>
        {loading ? (
          <CircularProgress />
        ) : (
          <List>
            {files.map((file) => (
              <ListItem key={file.id} disablePadding>
                <ListItemButton onClick={() => onSelect(file)}>
                  <ListItemText primary={file.name} secondary={file.path} />
                </ListItemButton>
              </ListItem>
            ))}
          </List>
        )}
      </DialogContent>
      <DialogActions>
        <Button onClick={onClose}>Annuleer</Button>
      </DialogActions>
    </Dialog>
  );
};

export default ScriptSelectModal;
