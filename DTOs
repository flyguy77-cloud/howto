// WorkflowRequestDto.java
public record WorkflowRequestDto(
    WorkflowDto workflow,
    List<NodeDto> nodes,
    List<EdgeDto> edges
) {
    public void applyTo(Workflow entity) {
        workflow.applyTo(entity);
        entity.clearChildren(); // Orphan removal, als geconfigureerd
        entity.setNodes(nodes.stream().map(NodeDto::toEntity).toList());
        entity.setEdges(edges.stream().map(EdgeDto::toEntity).toList());
    }

    public Workflow toEntity() {
        Workflow entity = new Workflow();
        applyTo(entity);
        return entity;
    }
}

// WorkflowDto.java
public record WorkflowDto(
    Long id,
    String name,
    String description,
    WorkflowMetadata metadata
) {
    public void applyTo(Workflow entity) {
        entity.setName(name);
        entity.setDescription(description);
        entity.setMetadata(metadata);
    }
}

// NodeDto.java
public record NodeDto(
    String nodeId,
    String type,
    String label,
    double positionX,
    double positionY,
    NodeData data
) {
    public Node toEntity() {
        return new Node(nodeId, type, label, positionX, positionY, data);
    }
}

// EdgeDto.java
public record EdgeDto(
    String edgeId,
    String source,
    String target,
    String label
) {
    public Edge toEntity() {
        return new Edge(edgeId, source, target, label);
    }
}

// WorkflowServiceImpl.java
@Service
@RequiredArgsConstructor
public class WorkflowServiceImpl implements WorkflowService {

    private final WorkflowRepository workflowRepository;

    @Override
    @Transactional
    public WorkflowResponseDto saveWorkflow(WorkflowRequestDto dto) {
        Workflow workflow = dto.toEntity();
        Workflow saved = workflowRepository.save(workflow);
        return WorkflowResponseDto.fromEntity(saved);
    }

    @Override
    @Transactional
    public WorkflowResponseDto updateWorkflow(Long id, WorkflowRequestDto dto) {
        Workflow existing = workflowRepository.findById(id)
            .orElseThrow(() -> new EntityNotFoundException("Workflow met id " + id + " niet gevonden"));

        dto.applyTo(existing);
        Workflow updated = workflowRepository.save(existing);
        return WorkflowResponseDto.fromEntity(updated);
    }
}



// Frontend Update workflow
const { id } = useParams(); // als je route `"/editor/:id"` is
const isEditMode = Boolean(id);


useEffect(() => {
  if (isEditMode) {
    fetch(`/api/workflows/${id}`)
      .then((res) => res.json())
      .then((data) => {
        setWorkflowInfo(data.workflow);
        setNodes(data.nodes);
        setEdges(data.edges);
      });
  }
}, [id]);



const handleSave = async () => {
  const payload = {
    workflow: workflowInfo,
    nodes,
    edges
  };

  if (isEditMode) {
    await axios.put(`/api/workflows/${id}`, payload);
  } else {
    await axios.post("/api/workflows", payload);
  }

// Editor page

<SaveModal
  open={isModalOpen}
  onClose={handleClose}
  onSave={handleSave}
  workflowInfo={workflow}
/>


onSave({
  ...workflow, // bestaande info (in edit mode)
  ...formData, // overschrijft naam/desc/cat
});



const handleSave = (formData: FormData) => {
  const payload = {
    ...workflow,            // bevat id als het een bestaande workflow is
    ...formData,            // bijgewerkte naam, description, etc.
    nodes,
    edges
  };

  if (workflow?.id) {
    // UPDATE bestaande workflow
    axios.put(`/api/workflows/${workflow.id}`, payload)
      .then(() => toast.success("Workflow bijgewerkt"));
  } else {
    // NIEUWE workflow
    axios.post("/api/workflows", payload)
      .then(() => toast.success("Workflow aangemaakt"));
  }
};




  // Geef feedback / sluit modal / navigeer terug
};

